#!/usr/bin/python2.7
# Author: Miandra Ellis
# Jun 26 2013
# Parse info from genbank file and output .gff3

import sys, os, re

gene_list = []
entry = ''
counter = 0
block_found = False

locus_tag = re.compile("/locus_tag=")
start_seq_tag = re.compile("<?[\\d]+[..]{2}>?[\\d]+>?")
phase_tag = re.compile("/codon_start=")
scaffold_tag = re.compile("(  gene  ) | (  CDS  ) | (  misc_feature  ) | (  tRNA  )")
dbxref_tag = re.compile("(/db_xref=)")
product_tag = re.compile ("(/product=)")
locus_header = re.compile("LOCUS")

class gene:
	def __init__(self, gene_name, source, gb_type, seq_start, \
		seq_end, score, strand, phase, db_xref, note):
		self.gene_name = gene_name
		self.source = source
		self.gb_type = gb_type
		self.seq_start = seq_start
		self.seq_end = seq_end
		self.score = score
		self.strand = strand
		self.phase = phase
		self.db_xref= db_xref
		self.note = note

def parser(entry):
	""" Parses all of entry and returns a gene object that represents it."""
	gn = '.' # gene name
	gbt = '.' # genbank type
	ss = '.'	# seq start
	se = '.' # seq end
	p = '0' # phase
	s = 'genbank' # source
	sc = '.' # score
	st = '+' # strand
	db_xref= [] # db_xref attribute
	note = "" # note attribute
	is_db_xref = False
	is_product = False

	entry = entry.split('\n')
	for line in entry:
		match = re.search(scaffold_tag, line)
		match1 = re.search(start_seq_tag, line)
		match2 = re.search(locus_tag, line)
		match3 = re.search(phase_tag, line)
		match4 = re.search(dbxref_tag, line)
		match5 = re.search(product_tag, line)
		
		if match and match1:
			line = line.replace(" ", "")
			if line.find("gene") >= 0:
				gbt = "gene"
			elif line.find("CDS") >=0:
				gbt = "CDS"
			elif line.find("misc_feature") >=0:
				gbt = "misc_feature"
			elif line.find("tRNA") >=0:
				gbt = "tRNA"
			
			if line.find("complement") >=0:
				st = "-"
			seq = str(match1.group(0))

			ss = seq.split("..")[0]
			ss = re.sub("\D", "", ss)

			se = seq.split("..")[1]
			se = re.sub("\D", "", se)

		if match2:
			line = line.strip()
			line = line.strip("/locus_tag=")
			gn = line[1:-1]
			
		if match3:
			line = line.strip()
			line = line.strip("/codon_start=")
			p = line		

		if line.find("/") >= 0:
			is_product = False

		if is_db_xref:
			line = line.strip()
			line = line.strip("\"")
			db_xref.append(line)

		if is_product:
			line = line.strip()
			line = line.strip("\"")
			note += line

		if match4: 
			line = line.strip()
			line = line.strip("/db_xref=")
			db_xref.append(line)

		if match5:
			if line.find("/product=") >= 0:
				line = line.strip()
				line = line.strip("/product=")
				note = line[1:-1]
				is_product = True
				
	return gene(gn, s, gbt, ss, se, sc, st, p , db_xref, note)

""" This is like the main function."""
path = os.getcwd()
genbank_filename = sys.argv[1]
file_path = path + "/" + genbank_filename
parse_me = open(file_path)

for line in parse_me:
	#finds any of the accepted genbank feature types
	#also finds the information for the second line of the gff3 file
	match_obj = re.search(scaffold_tag, line)
	match_obj1 = re.search(locus_header, line)

	#if locus header found get accession number
	if match_obj1:
		split_line = line.split()
		acc_num = split_line[1] 
	elif line.find("  source  ") >= 0:
		line = line.strip("  source  ")
		line = line.strip(" ")
		seq_id_ss = line.split("..")[0]		
		seq_id_se = line.split("..")[1]
	#if find one of genbank types create an entry
	#until the next genbank type is found. Parse entry.	
	elif match_obj:
		block_found = True
		if counter > 0: 
			gene_list.append(parser(entry))
			entry = ''
		counter += 1
		entry += line
	#if Origin is found parse the last entry created
	elif line.find('ORIGIN') >= 0:
		#'ORIGIN' signals the begnning of the nucleotide sequence.
		# May add this 
		gene_list.append(parser(entry))
		break
	#doesn't record information before first genbank
	#entry is found
	else:
		if block_found == True:
			entry +=line

output = open(acc_num +".gff3", "w")

first_line = "##gff-version 3"
second_line = "##sequence-region %s %s %s" %(acc_num, seq_id_ss, seq_id_se)

output.write(first_line)
output.write("\n")
output.write(second_line)
output.write("\n")
for i,obj in enumerate(gene_list):
	output.write(acc_num)
	output.write("\t")
	output.write(gene_list[i].source)
	output.write("\t")
	output.write(gene_list[i].gb_type)
	output.write("\t")
	output.write(gene_list[i].seq_start)
	output.write("\t")
	output.write(gene_list[i].seq_end)
	output.write("\t")
	output.write(gene_list[i].score)
	output.write("\t")
	output.write(gene_list[i].strand)
	output.write("\t")
	output.write(gene_list[i].phase)
	output.write("\t")

	if gene_list[i].gene_name:
		output.write("Name=")
		output.write(gene_list[i].gene_name)
		if gene_list[i].note or gene_list[i].db_xref:
			output.write(";")

	if gene_list[i].note:
		output.write("Note=")
		output.write(gene_list[i].note)
		if gene_list[i].db_xref:
			output.write(";")

	if gene_list[i].db_xref:
		output.write("Dbxref=")
		string = ",".join(gene_list[i].db_xref)
		string = re.sub("\"", "", string)
		output.write(string)
	output.write("\n")

output.close()
parse_me.close()